// DO NOT EDIT FILE MANUALLY

apply plugin: 'com.android.application'

// we're not actually building anything so we can be relaxed in what
// tools we use and thus can pick anything that may already be installed
def findBuildToolsVersion = {
    def files = file("${android.getSdkDirectory().getAbsolutePath()}/build-tools/")
            ?.list()
    
    if (files) {
        files.last()
    } else {
        throw new GradleException('Failed to find Android SDK build tools')
    }
}
def findCompileSdkVersion = {
    def files = file("${android.getSdkDirectory().getAbsolutePath()}/platforms/")
            ?.list({ dir, name -> name ==~ /android-\d+/ })
    
    if (files) {
        files.last().replace('android-', '').toInteger()
    } else {
        throw new GradleException('Failed to find Android SDK platform')
    }
}

def version = '1.2.6'
def notifications = hasProperty('notifications')
def smartads = hasProperty('smartads')
def network = { network ->
    dependencies.compile("com.deltadna.android:deltadna-smartads-provider-${network}:$version")
}

buildscript {
    repositories {
        maven { url 'http://jcenter.bintray.com' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

repositories {
    mavenCentral()
    maven { url 'http://jcenter.bintray.com' }
    maven { url "http://deltadna.bintray.com/android" }
}

android {
    buildToolsVersion findBuildToolsVersion()
    compileSdkVersion findCompileSdkVersion()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    // included as part of notifications
    if (!notifications) {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.google.android.gms', module: 'play-services-gcm'
        exclude group: 'com.google.android.gms', module: 'play-services-base'
    }
}

dependencies {
    network('adcolony')
    network('admob')
    network('amazon')
    network('chartboost')
    network('flurry')
    network('inmobi')
    network('mopub')
    network('unity')
    network('vungle')
    
    if (notifications) {
        compile 'com.deltadna.android:deltadna-sdk-notifications:4.2.0-SNAPSHOT'
    }
    if (smartads) {
        compile "com.deltadna.android:deltadna-smartads-core:$version"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task clean(type: Delete) {
    delete '../../Plugins/Android'
}

task download(type: Copy) {
    from configurations.compile
    into '../../Plugins/Android'
}
